{
    "tasks":[
      {
        "environment":{
          
        },
        "displayName":"gradlew test",
        "alwaysRun":false,
        "continueOnError":false,
        "condition":"succeeded()",
        "enabled":true,
        "timeoutInMinutes":0,
        "inputs":{
          "wrapperScript":"gradlew",
          "cwd":"",
          "options":"",
          "tasks":"$(GradleTestCommand)",
          "publishJUnitResults":"true",
          "testResultsFiles":"**/TEST-*.xml",
          "testRunTitle":"",
          "codeCoverageTool":"None",
          "classFilesDirectories":"build/classes/main/",
          "classFilter":"",
          "failIfCoverageEmpty":"false",
          "javaHomeSelection":"JDKVersion",
          "jdkVersion":"default",
          "jdkUserInputPath":"",
          "jdkArchitecture":"x64",
          "gradleOpts":"-Xmx1024m",
          "sqAnalysisEnabled":"false",
          "sqGradlePluginVersionChoice":"specify",
          "sqGradlePluginVersion":"2.6.1",
          "checkstyleAnalysisEnabled":"false",
          "findbugsAnalysisEnabled":"false",
          "pmdAnalysisEnabled":"false"
        },
        "task":{
          "id":"8d8eebd8-2b94-4c97-85af-839254cc6da4",
          "versionSpec":"2.*",
          "definitionType":"task"
        }
      },
      {
        "environment":{
          
        },
        "displayName":"gradlew build",
        "alwaysRun":false,
        "continueOnError":false,
        "condition":"succeeded()",
        "enabled":true,
        "timeoutInMinutes":0,
        "inputs":{
          "wrapperScript":"gradlew",
          "cwd":"",
          "options":"",
          "tasks":"build",
          "publishJUnitResults":"false",
          "testResultsFiles":"**/TEST-*.xml",
          "testRunTitle":"",
          "codeCoverageTool":"None",
          "classFilesDirectories":"build/classes/main/",
          "classFilter":"",
          "failIfCoverageEmpty":"false",
          "javaHomeSelection":"JDKVersion",
          "jdkVersion":"default",
          "jdkUserInputPath":"",
          "jdkArchitecture":"x64",
          "gradleOpts":"-Xmx1024m",
          "sqAnalysisEnabled":"false",
          "sqGradlePluginVersionChoice":"specify",
          "sqGradlePluginVersion":"2.6.1",
          "checkstyleAnalysisEnabled":"false",
          "findbugsAnalysisEnabled":"false",
          "pmdAnalysisEnabled":"false"
        },
        "task":{
          "id":"8d8eebd8-2b94-4c97-85af-839254cc6da4",
          "versionSpec":"2.*",
          "definitionType":"task"
        }
      },
      {
        "environment":{
          
        },
        "displayName":"Publish code coverage",
        "alwaysRun":false,
        "continueOnError":false,
        "condition":"succeeded()",
        "enabled":true,
        "timeoutInMinutes":0,
        "inputs":{
          "codeCoverageTool":"JaCoCo",
          "summaryFileLocation":"$(CoverageSummaryFile)",
          "pathToSources":"$(SourceFilesPath)",
          "reportDirectory":"",
          "additionalCodeCoverageFiles":"",
          "failIfCoverageEmpty":"false"
        },
        "task":{
          "id":"2a7ebc54-c13e-490e-81a5-d7561ab7cd97",
          "versionSpec":"1.*",
          "definitionType":"task"
        }
      },
      {
        "environment":{
          
        },
        "displayName":"Signing and aligning APK file(s)",
        "alwaysRun":false,
        "continueOnError":false,
        "condition":"succeeded()",
        "enabled":true,
        "timeoutInMinutes":0,
        "inputs":{
          "files":"**/*.apk",
          "apksign":"true",
          "keystoreFile":"$(KeyStoreFile)",
          "keystorePass":"$(KeyStorePassword)",
          "keystoreAlias":"$(KeyStoreAlias)",
          "keyPass":"$(KeyPassword)",
          "apksignerVersion":"latest",
          "apksignerArguments":"--verbose",
          "apksignerLocation":"",
          "zipalign":"false",
          "zipalignVersion":"latest",
          "zipalignLocation":""
        },
        "task":{
          "id":"80f3f6a0-82a6-4a22-ba7a-e5b8c541b9b9",
          "versionSpec":"3.*",
          "definitionType":"task"
        }
      },
      {
        "environment":{
          
        },
        "displayName":"Copy Files to: $(build.artifactstagingdirectory)",
        "alwaysRun":true,
        "continueOnError":false,
        "condition":"succeededOrFailed()",
        "enabled":true,
        "timeoutInMinutes":0,
        "inputs":{
          "SourceFolder":"$(ApkDistDirectory)",
          "Contents":"**/*.apk",
          "TargetFolder":"$(build.artifactstagingdirectory)",
          "CleanTargetFolder":"false",
          "OverWrite":"false",
          "flattenFolders":"false",
          "preserveTimestamp":"false",
          "retryCount":"0"
        },
        "task":{
          "id":"5bfb729a-a7c8-4a78-a7c3-8d717bb7c13c",
          "versionSpec":"2.*",
          "definitionType":"task"
        }
      },
      {
        "environment":{
          
        },
        "displayName":"Publish Pipeline Artifact",
        "alwaysRun":false,
        "continueOnError":false,
        "condition":"succeeded()",
        "enabled":true,
        "timeoutInMinutes":0,
        "inputs":{
          "path":"$(build.artifactstagingdirectory)/",
          "artifactName":"$(ArtifactName)",
          "artifactType":"pipeline",
          "fileSharePath":"",
          "parallel":"false",
          "parallelCount":"8"
        },
        "task":{
          "id":"ecdc45f6-832d-4ad9-b52b-ee49e94659be",
          "versionSpec":"1.*",
          "definitionType":"task"
        }
      }
    ],
    "runsOn":[
      "Agent",
      "DeploymentGroup"
    ],
    "revision":1,
    "createdBy":{
      "displayName":"Gladson Bruno",
      "id":"c05c2e1d-cdc5-6a51-a708-e3747345e104",
      "uniqueName":"gladson@arkhi.com.br"
    },
    "createdOn":"2021-04-04T13:13:11.757Z",
    "modifiedBy":{
      "displayName":"Gladson Bruno",
      "id":"c05c2e1d-cdc5-6a51-a708-e3747345e104",
      "uniqueName":"gladson@arkhi.com.br"
    },
    "modifiedOn":"2021-04-04T13:13:11.757Z",
    "id":"e9d04ee6-9d51-4f79-9aa9-59f34be3abf1",
    "name":"Task Group Android",
    "version":{
      "major":1,
      "minor":0,
      "patch":0,
      "isTest":false
    },
    "iconUrl":"https://cdn.vsassets.io/v/M184_20210326.7/_content/icon-meta-task.png",
    "friendlyName":"Task Group Android",
    "description":"",
    "category":"Build",
    "definitionType":"metaTask",
    "author":"Gladson Bruno",
    "demands":[
      
    ],
    "groups":[
      
    ],
    "inputs":[
      {
        "aliases":[
          
        ],
        "options":{
          
        },
        "properties":{
          
        },
        "name":"ApkDistDirectory",
        "label":"ApkDistDirectory",
        "defaultValue":"",
        "required":true,
        "type":"filePath",
        "helpMarkDown":"The source folder that the copy pattern(s) will be run from.  Empty is the root of the repo.  Use [variables](https://go.microsoft.com/fwlink/?LinkID=550988) if files are not in the repo. Example: $(agent.builddirectory)",
        "groupName":""
      },
      {
        "aliases":[
          
        ],
        "options":{
          
        },
        "properties":{
          
        },
        "name":"ArtifactName",
        "label":"ArtifactName",
        "defaultValue":"",
        "required":true,
        "type":"string",
        "helpMarkDown":"Name of the artifact to publish. If not set, defaults to a unique ID scoped to the job.",
        "groupName":""
      },
      {
        "aliases":[
          
        ],
        "options":{
          
        },
        "properties":{
          
        },
        "name":"CoverageSummaryFile",
        "label":"CoverageSummaryFile",
        "defaultValue":"",
        "required":true,
        "type":"string",
        "helpMarkDown":"Path of the summary file containing code coverage statistics, such as line, method, and class coverage. The value may contain minimatch patterns. For example: `$(System.DefaultWorkingDirectory)/MyApp/**/site/cobertura/coverage.xml`",
        "groupName":""
      },
      {
        "aliases":[
          
        ],
        "options":{
          
        },
        "properties":{
          
        },
        "name":"GradleTestCommand",
        "label":"GradleTestCommand",
        "defaultValue":"",
        "required":true,
        "type":"string",
        "helpMarkDown":"Command used to perform application tests using Gradlew",
        "groupName":""
      },
      {
        "aliases":[
          
        ],
        "options":{
          
        },
        "properties":{
          
        },
        "name":"KeyPassword",
        "label":"KeyPassword",
        "defaultValue":"",
        "required":true,
        "type":"string",
        "helpMarkDown":"Enter the key password for the alias and keystore file. Use a new variable with its lock enabled on the Variables tab to encrypt this value.",
        "groupName":""
      },
      {
        "aliases":[
          
        ],
        "options":{
          
        },
        "properties":{
          
        },
        "name":"KeyStoreAlias",
        "label":"KeyStoreAlias",
        "defaultValue":"",
        "required":true,
        "type":"string",
        "helpMarkDown":"Enter the alias that identifies the public/private key pair to be used in the keystore file.",
        "groupName":""
      },
      {
        "aliases":[
          
        ],
        "options":{
          
        },
        "properties":{
          
        },
        "name":"KeyStoreFile",
        "label":"KeyStoreFile",
        "defaultValue":"",
        "required":true,
        "type":"secureFile",
        "helpMarkDown":"Select the keystore file that was uploaded to `Secure Files` to be used to sign the APK.",
        "groupName":""
      },
      {
        "aliases":[
          
        ],
        "options":{
          
        },
        "properties":{
          
        },
        "name":"KeyStorePassword",
        "label":"KeyStorePassword",
        "defaultValue":"",
        "required":true,
        "type":"string",
        "helpMarkDown":"Enter the password for the provided keystore file. Use a new variable with its lock enabled on the Variables tab to encrypt this value.",
        "groupName":""
      },
      {
        "aliases":[
          
        ],
        "options":{
          
        },
        "properties":{
          
        },
        "name":"SourceFilesPath",
        "label":"SourceFilesPath",
        "defaultValue":"",
        "required":true,
        "type":"string",
        "helpMarkDown":"Path to source files is required when coverage XML reports do not contain absolute path to source files. For e.g., JaCoCo reports do not use absolute paths and when publishing JaCoCo coverage for Java apps, the pattern would be similar to `$(System.DefaultWorkingDirectory)/MyApp/src/main/java/`.<br />This input is also needed if tests are run in a docker container. This input should point to absolute path to source files on the host. For e.g., `$(System.DefaultWorkingDirectory)/MyApp/`",
        "groupName":""
      }
    ],
    "satisfies":[
      
    ],
    "sourceDefinitions":[
      
    ],
    "dataSourceBindings":[
      
    ],
    "instanceNameFormat":"Task group: Task Group Android $(ApkDistDirectory)",
    "preJobExecution":{
      
    },
    "execution":{
      
    },
    "postJobExecution":{
      
    }
  }